import React, { Component } from 'react';
import { connect } from 'react-redux';
import { getGeneratedArt, likeGeneratedArt } from '../../../actions/artsActions';
import { addFlashMessage } from '../../../actions/flashMessages';
import './ArtsGenerator.scss';
import Arts from './Arts'
import PropTypes from 'prop-types';
class ArtsGenerator extends Component {

  constructor(props) {
    super(props);
    this.state = {
      arts_info: {
        art_url: '/static/assets/generated/default.jpg', 
        genre: ''
      },
      address: 'http://localhost:5000',
      like: false
    }
  }

  static propTypes = {
    getGeneratedArt: PropTypes.func.isRequired,
    likeGeneratedArt: PropTypes.func.isRequired,
    addFlashMessage: PropTypes.func.isRequired
  }

  onClick = e => {
    const genre = e.target.dataset.value;
    this.props.getGeneratedArt(genre)
    .then(res => {
      const arts_url = res.data.image_file;
      const genre = res.data.genre;
      let statusCopy = Object.assign({}, this.state);
      statusCopy.arts_info.art_url = arts_url;
      statusCopy.arts_info.genre = genre;
      statusCopy.like = false;
      this.setState(statusCopy);
    });
  }

  onLike = e => {
    const if_default = this.state.arts_info.art_url.includes('default');
    const if_login = this.props.auth.isAuthenticated;
    const like = this.state.like;
    if(!if_default && if_login && !like) {
      let image_name = this.state.arts_info.art_url.split('/').pop().split('.')[0];
      let image_genre = this.state.arts_info.genre;
      let image = {
        image_name,
        image_genre
      }
      this.props.likeGeneratedArt(image)
      .then(res => {
        let success = res.data.code;
        if(success === "0") {
          this.setState({
            like: true
          })
          this.props.addFlashMessage({
            type: 'success',
            text: 'Save art successfully.'
          });
        }
      })
    } else {
      if(!if_login) {
        this.props.addFlashMessage({
          type: 'info',
          text: 'If you want to save this art, please login first.'
        });
      }
    }
  }

  render() {
    const { arts_info, address, like } = this.state;
    return (
      <div className="generator-content">
        <div className="text-declare">
          <span className="text-title">All paintings are generated by <span className="bold">GANs</span>(Generative adversarial networks) algorithm</span>
        </div>
        <div className="generator-section">
          <div className="generator">
            <Arts 
              address={ address } 
              art_url={arts_info.art_url} 
              like = {like}
              onLike = { this.onLike }
            >
            </Arts>
          </div>
          <div className="selection">
            <span className="text-title-selection">select one genre that you may want to generate</span>
            <div className="selector">
              <ul className="selector-list">
                <li 
                  className="selector-item"
                  onClick = { this.onClick }
                  data-value="abstract"
                >
                  <a 
                    className="btn-split" 
                    data-hover="ABSTRACT"
                    data-value="abstract"
                  >
                    <span data-value="abstract">ABSTRACT</span>
                  </a>
                </li>
                <li 
                  className="side-bar-item"
                  data-value="portrait"
                >
                  <a 
                    className="btn-split" 
                    data-hover="PORTRAIT"
                    data-value="portrait"
                  >
                    <span data-value="portrait">PORTRAIT</span>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  }
}
ArtsGenerator.propTypes = {
  auth: PropTypes.object.isRequired
}
const mapStateToProps = (state) => {
  return {
    auth: state.auth
  }
}
export default connect(mapStateToProps, { getGeneratedArt, likeGeneratedArt, addFlashMessage})(ArtsGenerator);
